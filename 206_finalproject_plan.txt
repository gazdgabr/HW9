SI 206 W17
Put your name here: Gabriella Gazdecki

----

Which option for the final project are you choosing -- 1, 2, or 3?

	Option 2 - API Mashup: Twitter & OMDB

IF YOU ARE CHOOSING OPTION 3, answer the following questions:

* Write 1-3 sentences summarizing what the goal of your project is:


* What are your two data sources? Provide links to documentation or websites you will be getting data from.


* Why are you proposing this project?


* What will the output of this project be? What will it look like, and what information will it contain?


* What are your concerns about this proposal?


-----

THE FOLLOWING QUESTIONS ARE FOR EVERYONE. (Though they may be easier if you are choosing Option 1 or 2, because you can reference the Option 1 or 2 instructions.)

* What will at least one of the classes you're going to define be called?
	Movie

* What will that class take as input to its constructor?
	A dictionary that represents a movie

* What will 1 instance of this class represent?
	A movie from OMDB and associated information about this movie

* What are 3 instance variables this class will have? What will they be called, and what information will they hold? Why are they important?

Its title		- title 	- This holds the title of the movie.		- Its good to know what the name of the movie is.
Its director	- director 	- This holds the director of the movie.		- Director are responsible for the quality of the movie.
Its IMDB rating - rating	- This holds the IMDB rating of the movie.	- This helps the viewer decided whether or not to watch.


* Explain 2 methods the class will have that are not the class constructor (__init__ method) by answering the following questions for each. 
ONE METHOD:
- What will the name of the method be?
	__str__

- What will the method do?
	It will return the string of the title of the movie

- Will it take any additional input? 
	no

- Will it return anything? Should it change anything about the instance/an instance variable? 
	It will a string. It should not change anthing about the instance at all.

- Why is it useful for this class definition, in this program?
	This will be helpful for readability, as the information as seen by the computer is not always useful for people. This method will format the info in a manner readable for people, which is very useful for print debugging, user friendliness, etc...

ANOTHER METHOD:
- What will the name of the method be?
	infoList

- What will the method do?
	It will return a list containing all of the information stored in the instance variables.

- Will it take any additional input? 
	No

- Will it return anything? Should it change anything about the instance/an instance variable? 
	It will return a list of strings. It should not change anything about the instance at all.

- Why is it useful for this class definition, in this program?
	This will be very helpful for loading the data into the database.

[If you definitely want to have a third, feel free to answer those questions a third time, because you'll have to do so eventually. when you write documentation!]


* What will the tables in your database be?
	Tweets
	Users
	Movies


* What fields will each database table have? Which field of them is the primary key? You should list the fields for each database table here, e.g.
	Tweets:
		tweet_text TEXT, tweet_id INTEGER PRIMARY KEY, user INTEGER, movie INTEGER, favorites INTEGER, retweets INTEGER
	Users:
		user_id INTEGER PRIMARY KEY, screen_name TEXT, user_favs INTEGER
	Movies:
		movie_id INTEGER PRIMARY KEY, movie_title TEXT, movie_director TEXT, languages INTEGER, IMDB_rating INTEGER, lead_actor TEXT
 



* List, in English, 2 queries you'll want to make from your database. At least one should be a JOIN. You can always change these later, but start with  ideas you're interested in and lessen the work on yourself later on! 
(e.g. from class examples, maybe "I want to make a query that accesses the numbers of times each user has favorited tweets, and the number of times tweets that user posted have been favorited -- so I'll be joining the Tweets table and the Users table")

	I want to make a query that accesses the tweets about a particular movie, so I'll be joining the Tweets table and the Movies table.

	I want to make a query that accesses the title, lead actor, director and rating of a movie, so I'll grab it all from the Movies table.

* What are at least 2 of the data processing mechanics you're planning to use? 

	Planning to use dictionary accumulation and list comprehensions. 


* Why will each of those be useful to you? What data might you use it on? 
(e.g. "Set comprehension: I think I'm going to be looking for unique names and proper nouns in this big set of text, so I'm going to use a set comprehension"). 
>>>This is especially important if you are doing Option 3, but it's important for everyone!<<<

	List comprehensions will be useful for code readability and efficiency during iteration through data from, say, Twitter, or OMDB.
	Dictionary accumulation will be useful for finding common actors and directors between movies. 


* What will your output look like? Will it be a .txt file? a CSV file? something else? What information will it contain? >>>This is especially important if you are doing Option 3, but it's important for everyone!<<<

	The final output will he a .txt file, as per instructions. It will be a summary page that has the 3 movie titles, along with a Twitter summary, current date, and the data/info associated with each movie in the database. 